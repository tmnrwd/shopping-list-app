{"version":3,"sources":["actions/index.js","reducers/index.js","reducers/visibilityFilterReducer.js","reducers/todoReducer.js","components/Link.js","containers/FilterLink.js","components/Filters.js","containers/AddTodo.js","components/Todo.js","components/TodoList.js","containers/VisibleTodoList.js","components/App.js","index.js","storage/index.js"],"names":["VisibilityFilters","nextTodoId","rootReducer","combineReducers","visibilityFilter","state","action","type","filter","todos","id","text","completed","_","map","todo","Object","assign","Link","Nav","Item","eventKey","this","props","children","onClick","disabled","active","React","Component","FilterLink","connect","ownProps","dispatch","Filters","variant","defaultActiveKey","AddTodo","input","Card","className","Body","onSubmit","e","preventDefault","value","trim","ref","node","Button","Todo","style","textDecoration","removeClick","TodoList","Table","key","onTodoClick","getVisibleTodos","t","VisibleTodoList","toggleTodo","removeTodo","App","Navbar","bg","Brand","Container","persistedState","serializedState","localStorage","getItem","JSON","parse","loadState","store","createStore","subscribe","stringify","setItem","saveState","getState","render","document","getElementById"],"mappings":"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","file":"static/js/main.895c6988.chunk.js","sourcesContent":["export const ADD_TODO = \"ADD_TODO\";\nexport const REMOVE_TODO = \"REMOVE_TODO\";\nexport const TOGGLE_TODO = \"TOGGLE_TODO\";\nexport const SET_VISIBILITY_FILTER = \"SET_VISIBILITY_FILTER\";\n\n\nexport const VisibilityFilters = {\n  SHOW_ALL: \"SHOW_ALL\",\n  SHOW_COMPLETED: \"SHOW_COMPLETED\",\n  SHOW_ACTIVE: \"SHOW_ACTIVE\"\n}\n\n\nlet nextTodoId = 0\nexport function addTodo(text) {\n  return {\n    type: ADD_TODO,\n    id: nextTodoId++,\n    text\n  }\n}\n\nexport function removeTodo(id) {\n  return {\n    type: REMOVE_TODO,\n    id\n  }\n}\n\nexport function toggleTodo(id) {\n  return {\n    type: TOGGLE_TODO,\n    id\n  }\n}\n\nexport function setVisibilityFilter(filter) {\n  return {\n    type: SET_VISIBILITY_FILTER,\n    filter\n  }\n}","import { combineReducers } from 'redux'\nimport {todoReducer} from './todoReducer'\nimport {visibilityFilterReducer} from './visibilityFilterReducer'\n\n\nexport const rootReducer = combineReducers({\n  visibilityFilter: visibilityFilterReducer,\n  todos: todoReducer,\n})","import {VisibilityFilters, SET_VISIBILITY_FILTER} from '../actions'\n\nexport function visibilityFilterReducer(state = VisibilityFilters.SHOW_ALL, action) {\n  switch (action.type) {\n    case SET_VISIBILITY_FILTER:\n      return action.filter\n    default:\n      return state\n  }\n}","import{ADD_TODO, REMOVE_TODO, TOGGLE_TODO} from '../actions/index'\n\nexport function todoReducer(state = [], action) {\n  switch (action.type) {\n    case ADD_TODO:\n      return [\n        ...state,\n        {\n          id: action.id,\n          text: action.text,\n          completed: false\n        }\n      ]\n    case REMOVE_TODO:\n      return state.filter((_, id) => action.id !== id)\n    case TOGGLE_TODO:\n      return state.map((todo) => {\n        if (todo.id === action.id) {\n          return Object.assign({}, todo, {\n            completed: !todo.completed\n          })\n        }\n        return todo\n      })\n    default:\n      return state\n  }\n}","import React from \"react\"\nimport PropTypes from 'prop-types'\nimport Nav from 'react-bootstrap/Nav'\n\n\nclass Link extends React.Component {\n  render() {\n    return (\n\n      <Nav.Item>\n        <Nav.Link eventKey={this.props.children} onClick={this.props.onClick} disabled={this.props.active}>\n          {this.props.children}\n        </Nav.Link>\n      </Nav.Item>\n\n    )\n  }\n}\n\nLink.propTypes = {\n  active: PropTypes.bool.isRequired,\n  children: PropTypes.node.isRequired,\n  onClick: PropTypes.func.isRequired\n}\n\nexport default Link\n\n","import { connect } from 'react-redux'\nimport { setVisibilityFilter } from '../actions/index'\nimport Link from '../components/Link'\n\nfunction mapStateToProps(state, ownProps) {\n  return {\n    active: ownProps.filter === state.visibilityFilter\n  }\n}\n\nfunction mapDispatchToProps(dispatch, ownProps) {\n  return {\n    onClick: () => {\n      dispatch(setVisibilityFilter(ownProps.filter))\n    }\n  }\n}\n\nconst FilterLink = connect(mapStateToProps, mapDispatchToProps)(Link)\n\nexport default FilterLink\n","import React from \"react\"\nimport FilterLink from '../containers/FilterLink'\nimport { VisibilityFilters } from '../actions/index'\nimport Nav from 'react-bootstrap/Nav';\n\nclass Filters extends React.Component {\n  render() {\n    return (\n      <Nav variant=\"tabs\" defaultActiveKey=\"All\">\n        <FilterLink filter={VisibilityFilters.SHOW_ALL}>All</FilterLink>\n        <FilterLink filter={VisibilityFilters.SHOW_ACTIVE}>Active</FilterLink>\n        <FilterLink filter={VisibilityFilters.SHOW_COMPLETED}>Completed</FilterLink>\n      </Nav>\n    )\n  }\n}\nexport default Filters\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { addTodo } from '../actions/index'\nimport Card from 'react-bootstrap/Card'\nimport Button from 'react-bootstrap/Button'\n\nclass AddTodo extends React.Component {\n  \nrender(){\n  let input\n\n  return(\n    <Card className=\"mb-5 mt-2\">\n      <Card.Body>\n      <form onSubmit={e => {\n        e.preventDefault()\n        if(!input.value.trim()) {\n          return\n        }\n        this.props.dispatch(addTodo(input.value))\n        input.value = ''\n      }}\n      >\n        <input ref={node => {\n          input = node\n        }}\n        />\n        <Button className=\"ml-5\" type=\"submit\">Add Task</Button>\n      </form>\n      </Card.Body>\n    </Card>\n  )\n}}\n\nexport default connect() (AddTodo)\n\n","import React from \"react\"\nimport PropTypes from 'prop-types'\nimport Button from 'react-bootstrap/Button'\n\nclass Todo extends React.Component {\n\n  render() {\n    return (\n      <tr>\n        <td>\n          {this.props.id}\n        </td>\n\n        <td>\n          <span style={{\n            textDecoration: this.props.completed\n              ? 'line-through' : 'none'\n          }} onClick={this.props.onClick}>\n            {this.props.text}\n          </span>\n        </td>\n\n        <td>\n          <Button variant=\"danger\" onClick={this.props.removeClick}>remove</Button>\n        </td>\n\n      </tr>\n    )\n  }\n}\n\nTodo.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  completed: PropTypes.bool.isRequired,\n  text: PropTypes.string.isRequired\n}\n\nexport default Todo","import React from \"react\"\nimport PropTypes from 'prop-types'\nimport Todo from './Todo'\nimport Table from 'react-bootstrap/Table'\n\nclass TodoList extends React.Component {\n\n  render() {\n    return (\n      <Table>\n        <thead>\n          <tr>\n            <th> ID</th>\n            <th>Task</th>\n            <th>Action</th>\n          </tr>\n        </thead>\n        <tbody>\n          {this.props.todos.map((todo) => (\n            <Todo key={todo.id} {...todo}\n              onClick={() => this.props.onTodoClick(todo.id)}\n              removeClick={() => this.props.removeClick(todo.id)} />\n          ))}\n        </tbody>\n      </Table>\n    )\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      completed: PropTypes.bool.isRequired,\n      text: PropTypes.string.isRequired\n    }).isRequired\n  ).isRequired,\n  onTodoClick: PropTypes.func.isRequired\n}\n\nexport default TodoList\n","import {connect} from 'react-redux'\nimport{toggleTodo} from '../actions/index'\nimport TodoList from '../components/TodoList'\nimport {removeTodo} from '../actions/index'\n\nfunction getVisibleTodos(todos, filter) {\n  switch (filter) {\n    case 'SHOW_COMPLETED':\n      return todos.filter(t => t.completed)\n    case 'SHOW_ACTIVE':\n      return todos.filter(t =>!t.completed)\n    case 'SHOW_ALL':\n    default:\n      return todos\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    todos: getVisibleTodos(state.todos, state.visibilityFilter)\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    onTodoClick: id => {\n      dispatch(toggleTodo(id))\n    },\n    removeClick: id =>{\n      dispatch(removeTodo(id))\n    }\n  }\n}\n\nconst VisibleTodoList = connect(mapStateToProps, mapDispatchToProps)(TodoList)\n\nexport default VisibleTodoList\n\n","import React from 'react';\nimport Filters from './Filters';\nimport AddTodo from '../containers/AddTodo';\nimport VisibleTodoList from '../containers/VisibleTodoList';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Container from 'react-bootstrap/Container';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div>\n        <Navbar bg=\"dark\" variant=\"dark\">\n          <Navbar.Brand>\n            Redux Todo\n          </Navbar.Brand>\n        </Navbar>\n        <Container>\n          <AddTodo />\n          <Filters />\n          <VisibleTodoList />\n        </Container>\n\n      </div >\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport {render} from 'react-dom';\nimport {Provider} from 'react-redux'\nimport {createStore} from \"redux\"\nimport {rootReducer} from './reducers/index'\nimport App from './components/App';\nimport {loadState, saveState} from './storage'\n\nconst persistedState = loadState();\nconst store =createStore(rootReducer, persistedState);\n\nstore.subscribe(() => {\n  saveState(store.getState())\n})\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n\n","export function loadState() {\n\n  const serializedState = localStorage.getItem('state');\n  if (!serializedState) {\n    return undefined;\n  }\n  return JSON.parse(serializedState);\n};\n\nexport function saveState(state) {\n\n  const serializedState = JSON.stringify(state);\n  localStorage.setItem('state', serializedState);\n} \n\n"],"sourceRoot":""}